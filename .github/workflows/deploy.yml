name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{ github.ref_name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Type check
      run: npm run type-check
      
    - name: Build application
      run: npm run build
      
    - name: Build verification
      run: |
        if [ -d "dist" ]; then
          echo "‚úÖ Build successful! Dist directory created."
          echo "üìÅ Build contents:"
          ls -la dist/
        else
          echo "‚ùå Build failed! Dist directory not found."
          exit 1
        fi
      
    - name: Deploy to VPS
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.SERVER_IP }}
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        debug: true
        script: |
          set -e
          echo "üîê SSH Authentication successful!"
          echo "Starting deployment process..."
          echo "Current directory: $(pwd)"
          echo "User: $(whoami)"
          echo "Branch: ${{ env.BRANCH_NAME }}"
          
          # Setup SSH key for GitHub access
          echo "üîë Setting up SSH key for GitHub access..."
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Add the SSH key to authorized_keys for GitHub
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Extract public key from private key
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
          chmod 644 ~/.ssh/id_rsa.pub
          
          # Add GitHub to known hosts
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          
          # Test GitHub SSH connection
          echo "Testing GitHub SSH connection..."
          ssh -T git@github.com || true
          
          # Set repository path based on branch
          if [ "${{ env.BRANCH_NAME }}" = "main" ]; then
            REPO_PATH="/root/Tribute"
            DEPLOY_USER="root"
          else
            REPO_PATH="/root/Tribute"
            DEPLOY_USER="root"
          fi
          
          echo "Using repository path: $REPO_PATH"
          
          # Navigate to repository directory
          if [ -d "$REPO_PATH" ]; then
            cd "$REPO_PATH"
            echo "Repository directory: $(pwd)"
          else
            echo "‚ùå Repository directory not found: $REPO_PATH"
            echo "Available directories in /root/:"
            ls -la /root/
            echo "Creating repository directory..."
            mkdir -p "$REPO_PATH"
            cd "$REPO_PATH"
            # Use SSH for git clone
            git clone git@github.com:${{ github.repository_owner }}/Tribute.git .
          fi
          
          # Pull latest changes
          echo "üì• Pulling latest changes..."
          git fetch origin
          git reset --hard origin/${{ env.BRANCH_NAME }}
          
          # Navigate to frontend directory
          if [ -d "Tribute-front" ]; then
            cd Tribute-front
            echo "Frontend directory: $(pwd)"
            ls -la
          else
            echo "‚ùå Tribute-front directory not found!"
            echo "Available directories:"
            ls -la
            exit 1
          fi
          
          echo "üì¶ Installing dependencies..."
          npm ci
          
          echo "üî® Building application..."
          npm run build
          
          echo "‚úÖ Build verification..."
          if [ -d "dist" ]; then
            echo "‚úÖ Build successful! Dist directory created."
            echo "üìÅ Build contents:"
            ls -la dist/
          else
            echo "‚ùå Build failed! Dist directory not found."
            exit 1
          fi
          
          echo "üöÄ Starting application..."
          # Stop any existing process
          pkill -f "npm.*start" || true
          pkill -f "node.*dist" || true
          pkill -f "serve.*dist" || true
          
          # Start the application using serve
          echo "Installing serve globally..."
          npm install -g serve
          
          echo "Starting application with serve..."
          nohup serve -s dist -l 3000 > app.log 2>&1 &
          
          echo "‚è≥ Waiting for application to start..."
          sleep 10
          
          # Check if application is running
          if pgrep -f "serve.*dist" > /dev/null; then
            echo "‚úÖ Application started successfully!"
            echo "üìã Application logs:"
            tail -n 10 app.log
            echo "üåê Application should be available at: http://${{ secrets.SERVER_IP }}:3000"
          else
            echo "‚ùå Application failed to start!"
            echo "üìã Error logs:"
            cat app.log
            exit 1
          fi
          
          echo "Frontend deployment completed successfully!"
        port: 22
        timeout: 30s
        command_timeout: 10m
        proxy_port: 22
        proxy_timeout: 30s

    - name: Notify Telegram (success)
      if: success()
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TG_CHAT_ID }}" \
          -d text="‚úÖ Frontend (${{ env.BRANCH_NAME }}) —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–µ–ø–ª–æ–µ–Ω."

    - name: Notify Telegram (failure)
      if: failure()
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TG_CHAT_ID }}" \
          -d text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ Frontend (${{ env.BRANCH_NAME }})" 
