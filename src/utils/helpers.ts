// Format currency
export const formatCurrency = (amount: number, currency: string = 'USD'): string => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: currency,
  }).format(amount);
};

// Format date
export const formatDate = (dateString: string): string => {
  const date = new Date(dateString);
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
  }).format(date);
};

// Format relative time
export const formatRelativeTime = (dateString: string): string => {
  const date = new Date(dateString);
  const now = new Date();
  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);

  if (diffInSeconds < 60) {
    return 'just now';
  } else if (diffInSeconds < 3600) {
    const minutes = Math.floor(diffInSeconds / 60);
    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
  } else if (diffInSeconds < 86400) {
    const hours = Math.floor(diffInSeconds / 3600);
    return `${hours} hour${hours > 1 ? 's' : ''} ago`;
  } else if (diffInSeconds < 2592000) {
    const days = Math.floor(diffInSeconds / 86400);
    return `${days} day${days > 1 ? 's' : ''} ago`;
  } else {
    return formatDate(dateString);
  }
};

// Get user initials
export const getUserInitials = (firstName: string, lastName?: string): string => {
  const firstInitial = firstName.charAt(0).toUpperCase();
  const lastInitial = lastName ? lastName.charAt(0).toUpperCase() : '';
  return `${firstInitial}${lastInitial}`;
};

// Validate email
export const isValidEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

// Debounce function
export const debounce = <T extends (...args: any[]) => any>(
  func: T,
  wait: number
): ((...args: Parameters<T>) => void) => {
  let timeout: NodeJS.Timeout;
  return (...args: Parameters<T>) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), wait);
  };
};

// Generate random ID
export const generateId = (): string => {
  return Math.random().toString(36).substr(2, 9);
};

// Truncate text
export const truncateText = (text: string, maxLength: number): string => {
  if (text.length <= maxLength) return text;
  return text.substr(0, maxLength) + '...';
};

// Capitalize first letter
export const capitalize = (str: string): string => {
  return str.charAt(0).toUpperCase() + str.slice(1);
};

// Check if running in Telegram Web App
export const isTelegramWebApp = (): boolean => {
  return typeof window !== 'undefined' && window.Telegram?.WebApp !== undefined;
};

// Get Telegram theme color
export const getTelegramThemeColor = (): string => {
  if (isTelegramWebApp()) {
    return window.Telegram.WebApp.themeParams.button_color || '#0088cc';
  }
  return '#0088cc';
};

// Dark mode utilities
export const isDarkMode = (): boolean => {
  if (typeof window === 'undefined') return false;
  return document.documentElement.classList.contains('dark');
};

export const setDarkMode = (enabled: boolean): void => {
  if (typeof window === 'undefined') return;
  
  if (enabled) {
    document.documentElement.classList.add('dark');
  } else {
    document.documentElement.classList.remove('dark');
  }
};

export const toggleDarkMode = (): void => {
  if (typeof window === 'undefined') return;
  
  const isDark = isDarkMode();
  setDarkMode(!isDark);
};

// Get system preference for dark mode
export const getSystemDarkModePreference = (): boolean => {
  if (typeof window === 'undefined') return false;
  return window.matchMedia('(prefers-color-scheme: dark)').matches;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Telegram WebApp
export const getTelegramWebApp = () => {
  return window.Telegram?.WebApp;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–∞ sendData
export const isSendDataAvailable = (): boolean => {
  return isTelegramWebApp() && typeof window.Telegram.WebApp.sendData === 'function';
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ Telegram —á–∞—Ç
export const sendLogToTelegram = async (message: string) => {
  try {
    const botToken = '7688554254:AAETiKY-EFO4VBCXhr-715J28mHEXxoKmvI';
    const chatId = '-4935327333'; // –†–∞–±–æ—á–∏–π —á–∞—Ç
    const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
    
    const timestamp = new Date().toLocaleString('ru-RU');
    const logMessage = `üì± WebApp Log [${timestamp}]:\n${message}`;
    
    await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: logMessage,
        parse_mode: 'HTML'
      })
    });
    
    console.log('üì§ Log sent to Telegram:', message);
  } catch (error: any) {
    console.error('‚ùå Failed to send log to Telegram:', error?.message || error);
  }
};

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram –±–æ—Ç–∞
export const sendDataToTelegram = async (data: string): Promise<boolean> => {
  console.log(`üì§ Attempting to send data: ${data}`);
  await sendLogToTelegram(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ${data}`);
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ WebApp
  await sendLogToTelegram(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ WebApp —Å–æ—Å—Ç–æ—è–Ω–∏—è...`);
  
  if (!isTelegramWebApp()) {
    const errorMsg = '‚ùå Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    console.error(errorMsg);
    await sendLogToTelegram(errorMsg);
    return false;
  }

  await sendLogToTelegram(`‚úÖ WebApp API –¥–æ—Å—Ç—É–ø–µ–Ω`);

  if (!isSendDataAvailable()) {
    const errorMsg = '‚ùå sendData method –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    console.error(errorMsg);
    await sendLogToTelegram(errorMsg);
    return false;
  }

  await sendLogToTelegram(`‚úÖ sendData –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º initData
  const webApp = window.Telegram.WebApp;
  if (!webApp.initData) {
    const errorMsg = '‚ùå initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - WebApp –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω';
    console.error(errorMsg);
    await sendLogToTelegram(errorMsg);
    return false;
  }

  await sendLogToTelegram(`‚úÖ initData –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (${webApp.initData.length} —Å–∏–º–≤–æ–ª–æ–≤)`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (webApp.initDataUnsafe?.user) {
    const user = webApp.initDataUnsafe.user;
    await sendLogToTelegram(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name} (ID: ${user.id})`);
  } else {
    await sendLogToTelegram(`‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
  await sendLogToTelegram(`üì± –í–µ—Ä—Å–∏—è: ${webApp.version}, –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${webApp.platform}`);

  try {
    await sendLogToTelegram(`üöÄ –í—ã–∑—ã–≤–∞–µ–º window.Telegram.WebApp.sendData("${data}")...`);
    
    // –í—ã–∑—ã–≤–∞–µ–º sendData
    const result = await window.Telegram.WebApp.sendData(data);
    
    await sendLogToTelegram(`‚úÖ sendData –≤—ã–∑–≤–∞–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`);
    
    const successMsg = `‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ${data}`;
    console.log(successMsg);
    await sendLogToTelegram(successMsg);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    setTimeout(async () => {
      await sendLogToTelegram(`‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã: –¥–∞–Ω–Ω—ã–µ "${data}" –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω—ã –±–æ—Ç–æ–º`);
    }, 2000);
    
    return true;
  } catch (error: any) {
    const errorMsg = `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error?.message || error} –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: ${data}`;
    console.error(errorMsg);
    await sendLogToTelegram(errorMsg);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
    await sendLogToTelegram(`üîç –¢–∏–ø –æ—à–∏–±–∫–∏: ${typeof error}`);
    await sendLogToTelegram(`üîç –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error?.stack || '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
    
    return false;
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
export const initializeTelegramWebApp = (): boolean => {
  if (!isTelegramWebApp()) {
    const msg = '‚ö†Ô∏è Telegram WebApp not available';
    console.log(msg);
    sendLogToTelegram(msg);
    return false;
  }
  
  try {
    const webApp = window.Telegram.WebApp;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if (typeof webApp.ready === 'function') {
      webApp.ready();
      console.log('‚úÖ WebApp.ready() called');
    }
    
    if (typeof webApp.expand === 'function') {
      webApp.expand();
      console.log('‚úÖ WebApp.expand() called');
    }
    
    if (typeof webApp.setHeaderColor === 'function') {
      webApp.setHeaderColor('#ffffff');
    }
    
    if (typeof webApp.setBackgroundColor === 'function') {
      webApp.setBackgroundColor('#f2f2f2');
    }
    
    const successMsg = '‚úÖ Telegram WebApp initialized successfully';
    console.log(successMsg);
    sendLogToTelegram(successMsg);
    return true;
  } catch (error: any) {
    const errorMsg = `‚ùå Error initializing Telegram WebApp: ${error?.message || error}`;
    console.error(errorMsg);
    sendLogToTelegram(errorMsg);
    return false;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ WebApp –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
export const getWebAppInfo = () => {
  if (!isTelegramWebApp()) {
    return { available: false };
  }
  
  const webApp = window.Telegram.WebApp;
  return {
    available: true,
    version: webApp.version,
    platform: webApp.platform,
    initData: webApp.initData ? 'present' : 'missing',
    initDataUnsafe: webApp.initDataUnsafe,
    sendDataAvailable: typeof webApp.sendData === 'function',
    readyAvailable: typeof webApp.ready === 'function',
    expandAvailable: typeof webApp.expand === 'function',
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ Telegram
export const sendDebugInfoToTelegram = async () => {
  const info = getWebAppInfo();
  const timestamp = new Date().toLocaleString('ru-RU');
  
  let debugMessage = `üîç WebApp Debug Info [${timestamp}]:\n\n`;
  
  if (info.available) {
    debugMessage += `‚úÖ WebApp –¥–æ—Å—Ç—É–ø–µ–Ω\n`;
    debugMessage += `üì± –í–µ—Ä—Å–∏—è: ${info.version}\n`;
    debugMessage += `üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${info.platform}\n`;
    debugMessage += `üìä initData: ${info.initData}\n`;
    debugMessage += `üì§ sendData –¥–æ—Å—Ç—É–ø–µ–Ω: ${info.sendDataAvailable ? '–î–∞' : '–ù–µ—Ç'}\n`;
    debugMessage += `‚öôÔ∏è ready –¥–æ—Å—Ç—É–ø–µ–Ω: ${info.readyAvailable ? '–î–∞' : '–ù–µ—Ç'}\n`;
    debugMessage += `üìè expand –¥–æ—Å—Ç—É–ø–µ–Ω: ${info.expandAvailable ? '–î–∞' : '–ù–µ—Ç'}\n`;
    
    if (window.Telegram?.WebApp?.initDataUnsafe?.user) {
      const user = window.Telegram.WebApp.initDataUnsafe.user;
      debugMessage += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name} ${user.last_name || ''} (ID: ${user.id})\n`;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ WebApp
    const webApp = window.Telegram.WebApp;
    debugMessage += `\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n`;
    debugMessage += `üîó URL: ${window.location.href}\n`;
    debugMessage += `üåê User Agent: ${navigator.userAgent.substring(0, 100)}...\n`;
    debugMessage += `üì± isExpanded: ${webApp.isExpanded}\n`;
    debugMessage += `üìè viewportHeight: ${webApp.viewportHeight}\n`;
    debugMessage += `üé® colorScheme: ${webApp.colorScheme}\n`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    debugMessage += `\nüîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:\n`;
    const methods = ['ready', 'expand', 'close', 'sendData', 'showPopup', 'showAlert', 'showConfirm'];
    methods.forEach(method => {
      const isAvailable = typeof webApp[method] === 'function';
      debugMessage += `${isAvailable ? '‚úÖ' : '‚ùå'} ${method}: ${isAvailable ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n`;
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º initData –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ
    if (webApp.initData) {
      debugMessage += `\nüìä initData –¥–µ—Ç–∞–ª–∏:\n`;
      debugMessage += `üìè –î–ª–∏–Ω–∞: ${webApp.initData.length} —Å–∏–º–≤–æ–ª–æ–≤\n`;
      debugMessage += `üîë –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: ${webApp.initData.substring(0, 20)}...\n`;
      
      // –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å initData
      try {
        const urlParams = new URLSearchParams(webApp.initData);
        debugMessage += `üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã initData:\n`;
        for (const [key, value] of urlParams.entries()) {
          if (key !== 'hash') { // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–µ—à
            debugMessage += `  ${key}: ${value.substring(0, 50)}${value.length > 50 ? '...' : ''}\n`;
          }
        }
      } catch (e) {
        debugMessage += `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å initData: ${e}\n`;
      }
    }
    
  } else {
    debugMessage += `‚ùå WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n`;
    debugMessage += `üåê –ó–∞–ø—É—â–µ–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: ${typeof window !== 'undefined'}\n`;
    debugMessage += `üì± Telegram –æ–±—ä–µ–∫—Ç: ${window.Telegram ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n`;
    debugMessage += `üîó URL: ${window.location.href}\n`;
    debugMessage += `üåê User Agent: ${navigator.userAgent.substring(0, 100)}...\n`;
  }
  
  await sendLogToTelegram(debugMessage);
}; 